#summary About emo-framework
#labels Phase-Design
#sidebar Sidebar

= Introduction =

emo(yee-mow) is 2D game engine for Android and iOS.

emo is lightweight game framework that is driven by Squirrel, object-oriented scripting language for your game logic. emo has native game engine almost all codes are written in C/C++ for Android and C/C++/Objective-C for iOS that is based on OpenGL for graphic rendering and OpenAL/OpenSL for sound interface. 

[http://www.emo-framework.com/images/emodesign.png]

Squirrel is intuitive lightweight object-oriented programming language that fits real-time requirements of your games. *You can write all of your game logic by Squirrel programming language*. You don't have to learn Objective-C or even Java, you need no knowledge for Apple's Foundation Framework nor Android API. With Squirrel and emo framework, you can write your game once by Squirrel that runs on both Android and iOS.

== Easy to Use ==

As emo has simple and easy to use application programming interface that is running on top of the Squirrel programming language, you don't have to endure the difficulties of learning Objective-C and Java, and you can focus on your game logic by using one programming language. Not only novice programmers but also professional game programmers who are familiar with Lua (famous game programming language in the game industry) will make full use of Squirrel in a minute because Squirrel is much inspired by the language like Lua, JavaScript and Python.

== Lightweight ==

One of the key concepts of emo-framework is to keep it simple and lightweight in many ways. emo is driven by Squirrel that fits in the size, memory bandwidth, and real-time requirements of games. emo has native game engine which almost all codes are written in C/C++ for Android and C/C++/Objective-C for iOS that is based on OpenGL for graphic rendering and OpenAL/OpenSL for sound interface. 

== Open source and Free ==

emo is released under the terms of open-source license: New BSD License. You can use emo framework at absolutely free of charge. You don't have to disclose your source code even in the commercial products. And also you don't have to show any logo or something like that of emo framework in your game. (note: redistributions in binary form must reproduce the copyright notice, see the license document for details.)


== Object-Oriented ==

By using emo framework you can write your game logic by Squirrel: object-oriented programming language. You can write your game level as "class" and define the callback event as methods. It goes something like below:

{{{
local stage   = emo.Stage(); // stage class represents your game stage

/*
 * Level 1 definition
 */
class Level_1 {

    dogSprite  = emo.Sprite("dog.png");

    /*
     * called when level 1 started
     */
    function onLoad() {
        dogSprite.load(); // load dog sprite into the screen
    }

    /*
     * called when level 1 ends.
     */
    function onDispose() {
        dogSprite.remove(); // remove the sprite from the screen
    }

    /*
     * when the screen is touched down, proceed to the next level.
     */
    function onMotionEvent(motionEvent) {
        if (motionEvent.getAction() == MOTION_EVENT_ACTION_DOWN) {
            stage.load(Level_2());
        }
    }
}

/*
 * Level 2 definition
 */
class Level_2 {

    kingSprite = emo.Sprite("king.png");

    /*
     * called when level 2 started
     */
    function onLoad() {
        kingSprite.load(); // load king sprite into the screen
    }

    /*
     * called when level 2 ends.
     */
    function onDispose() {
        kingSprite.remove(); // remove the sprite from the screen
    }
}

/*
 * load Level 1 stage when this script is loaded
 */
function emo::onLoad() {
    stage.load(Level_1());
}
}}}
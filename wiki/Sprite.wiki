#summary API reference for emo.Sprite
#labels Phase-Implementation

= Introduction =

emo.Sprite class represents basic entity for your game. Sprite class can move, scale and rotates around the screen. Sprite have one texture image that cannot contain multiple frames. If you want to use multiple frames from one image(aka sprite sheet), use SpriteSheet class.

== constructor ==

Create a sprite instance with a parameter for image file name. *Only PNG image can be used* to create a sprite. By using Sprite constructor the framework reserve the vertex buffer however image file itself is not loaded yet.

{{{
// create a sprite instance from dog.png
local sprite = emo.Sprite("dog.png");
}}}

== load ==

Load the sprite into the screen. Image file associated with this sprite is loaded into the memory and loaded to the screen. If you want to just load and hide the sprite use Sprite#hide before calling load().

{{{
local sprite = emo.Sprite("dog.png");
sprite.load(); // the sprite will be loaded immediately to the screen.

local hideSprite = emo.Sprite("dog.png");
hideSprite.hide(); // hide the sprite
hideSprite.load(); // the sprite is loaded but this sprite is not visible.

// .. on later events
hideSprite.show(); // now the sprite is visible

}}}

== show and hide ==

Show and hide the sprite from the screen. Sprite#show updates the alpha color of the sprite to 0(transparent) and Sprite#hide updates the alpha color of the sprite to 1.

{{{
local sprite = emo.Sprite("dog.png");
sprite.hide(); // hide the sprite
sprite.show(); // show the sprite
}}}

== Changing colors ==

Sprite class can change its color by using Sprite#red, Sprite#green, Sprite#blue. Alpha color also can be changed by Sprite#alpha to change transparency of the sprite. If no parameter has been specified these functions, current color is returned. Each color value is float value from 0 to 1. By using Sprite#color all colors can be updated at a time.

{{{
local sprite = emo.Sprite("dog.png");

sprite.alpha(0); // Just as same as calling hide();
sprite.alpha(1); // Just as same as calling show();

local a = sprite.alpha(); // returns current alpha value ... 1

sprite.color(0, 0, 0, 1); // red=0, green=0, blue=0, alpha=1 ... color equals 'black'

sprite.red(1); // update the red color to 1 ... RGBA(1, 0, 0, 1) = red
local r = sprite.red(); // returns current red value ... 1

sprite.green(1); // update green color to 1 ... RGBA(1, 1, 0, 1) = yellow
local g = sprite.green(); // returns current green value ... 1

sprite.blue(1); // update blue color to 1 ... RGBA(1, 1, 1, 1) = white
local b = sprite.blue(); // returns current blue value ... 1
}}}
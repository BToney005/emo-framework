#summary API reference for emo.Runtime
#labels Phase-Implementation

= emo.Runtime =

emo.Runtime class represents basic functions for emo-framework runtime that contains import, log and so on.

== import ==

Runtime#import imports and compiles the Squirrel scripts from the asset. Any files from asset can be imported using this function on demand at runtime. This function is useful for loading new stage or levels dynamically at runtime.

{{{
local runtime = emo.Runtime();
runtime.import("stage2.nut");
// for short, you can write import statement like this.
// emo.Runtime.import("stage2.nut");
}}}

=== log ===

Runtime#log is useful for print debug message into the log console. Loggin message can be seen at logcat(Android) or console(iOS). Runtime#log needs log level parameter and message string.

{{{
local runtime = emo.Runtime();
runtime.log(LOG_INFO, "info message");
runtime.log(LOG_ERROR, "error message");
runtime.log(LOG_WARN, "warn message");
}}} 

=== info ===

Runtime#info is useful for print debug information message into the log console. Logging message can be seen at logcat(Android) or console(iOS). 

{{{
local runtime = emo.Runtime();
runtime.info("info message");
}}}

=== error ===

Runtime#info is useful for print error message into the log console. Logging message can be seen at logcat(Android) or console(iOS). 

{{{
local runtime = emo.Runtime();
runtime.error("error message");
}}}

=== warn ===

Runtime#info is useful for print warning message into the log console. Logging message can be seen at logcat(Android) or console(iOS). 

{{{
local runtime = emo.Runtime();
runtime.warn("warn message");
}}}

=== setLogLevel ==

Runtime#setLogLevel sets the current log level. Log level is used to suppress unnecessary log message sent from the application. If the log level equals 'LOG_INFO', all messages are logged, if the log level equals LOG_WARN 'warn' and 'error' messages are logged. If the log level equals LOG_ERROR only the 'error' messages are logged. 

{{{
local runtime = emo.Runtime();
// suppress the 'info' message'
runtime.setLogLevel(LOG_WARN);
}}}

=== os ===

Runtime#os returns OS type that emo-framework is running on. OS_ANDROID and OS_IOS constant variable can be used to check the os name.

{{{
local runtime = emo.Runtime();
local os = runtime.os();
if (os == OS_ANDROID) {
  print("Android");
} else if (os == OS_IOS) {
  print("iOS");
}
}}}

=== device ===

Runtime#device returns device type that emo-framework is running on. For iPhone this function returns the "hw.machine" value of sysctlbyname. For Android this function returns the value of android.os.Build.DEVICE constant;

{{{
local runtime = emo.Runtime();
local device = runtime.device();
// returns 'iPhone3,1' if it runs on iPhone 4
// returns 'generic' if it runs on Android Simulator
}}}

=== isSimulator ===

Runtime#isSimulator returns if the emo-framework runs on the simulator. This function is useful for developing and debugging.

{{{
local runtime = emo.Runtime();
if (runtime.isSimulator()) {
    print("this program runs on the simulator");
} else {
    print("this program runs on the actual device");
}
}}}

=== finish ===

Runtime#finish finishes the current activity. *Runtime#finish works only on the Android platform*. Nothing is happened if finish() is called from iOS because the 'Home' button is the only way to finish the application.

{{{
local runtime = emo.Runtime();
runtime.finish(); // finishes the current activity
}}}